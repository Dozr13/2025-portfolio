name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Enable Corepack
      run: corepack enable
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
    
    - name: Install dependencies
      run: yarn install --immutable
    
    - name: Generate Prisma client
      run: yarn db:generate
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Run linting
      run: yarn lint
    
    - name: Type check
      run: yarn tsc --noEmit
    
    - name: Build application
      run: yarn build
      env:
        NEXT_PUBLIC_EMAILJS_SERVICE_ID: ${{ secrets.NEXT_PUBLIC_EMAILJS_SERVICE_ID }}
        NEXT_PUBLIC_EMAILJS_TEMPLATE_ID: ${{ secrets.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID }}
        NEXT_PUBLIC_EMAILJS_PUBLIC_KEY: ${{ secrets.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY }}
        # Database (new - required for Prisma)
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        # Admin credentials (new - required for auth)
        ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
    
    - name: Run tests (when you add them)
      run: echo "Add your test command here when ready"
      # run: yarn test

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: docker build -t portfolio:${{ github.sha }} .
    
    - name: Test Docker image
      run: |
        # Create a test .env.local file for Docker test
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > test.env
        echo "ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}" >> test.env
        echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> test.env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> test.env
        echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> test.env
        
        # Run container with environment variables
        docker run -d -p 3000:3000 --env-file test.env --name test-container portfolio:${{ github.sha }}
        sleep 15
        curl -f http://localhost:3000 || exit 1
        docker stop test-container
        rm test.env

  # Vercel handles deployment automatically
  # This job just validates the build
  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    - name: Deploy notification
      run: echo "Ready for Vercel auto-deployment"