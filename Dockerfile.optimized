# Production-optimized multi-stage Dockerfile for Wade's Portfolio

# Stage 1: Dependencies installation
FROM node:20-alpine AS deps
WORKDIR /app

# Enable Yarn 4 and copy configuration files
RUN corepack enable
COPY package.json yarn.lock .yarnrc.yml ./
COPY .yarn/releases ./.yarn/releases

# Install production dependencies only
RUN yarn workspaces focus --all --production

# Stage 2: Build stage
FROM node:20-alpine AS builder
WORKDIR /app

# Enable Yarn 4 and copy configuration files
RUN corepack enable
COPY package.json yarn.lock .yarnrc.yml ./
COPY .yarn ./.yarn

# Install all dependencies (including dev)
RUN yarn install --immutable

# Copy source code
COPY . .
COPY --from=deps /app/node_modules ./node_modules

# Generate Prisma client
RUN yarn db:generate

# Build the application
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
RUN yarn build

# Stage 3: Runtime stage
FROM node:20-alpine AS runtime
WORKDIR /app

# Install necessary runtime packages
RUN apk add --no-cache curl

# Enable Yarn 4
RUN corepack enable

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy necessary files from builder stage
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/prisma ./prisma
# Copy Prisma client output if needed by runtime (kept outside node_modules)
# COPY --from=builder /app/generated ./generated

# Copy and setup optimized entrypoint script
COPY docker-entrypoint.optimized.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh
RUN chown nextjs:nodejs /usr/local/bin/docker-entrypoint.sh

# Change ownership of app directory
RUN chown -R nextjs:nodejs /app
USER nextjs

# Expose port
EXPOSE 3000

# Set environment variables
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"


ENTRYPOINT ["docker-entrypoint.sh"]
CMD ["node", "server.js"]